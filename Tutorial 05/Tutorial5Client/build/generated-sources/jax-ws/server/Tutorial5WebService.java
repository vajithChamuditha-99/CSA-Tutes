
package server;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.FaultAction;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.6-1b01 
 * Generated source version: 2.2
 * 
 */
@WebService(name = "Tutorial5WebService", targetNamespace = "http://server/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface Tutorial5WebService {


    /**
     * 
     * @return
     *     returns server.TemperatureSample
     * @throws Exception_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getMaximum", targetNamespace = "http://server/", className = "server.GetMaximum")
    @ResponseWrapper(localName = "getMaximumResponse", targetNamespace = "http://server/", className = "server.GetMaximumResponse")
    @Action(input = "http://server/Tutorial5WebService/getMaximumRequest", output = "http://server/Tutorial5WebService/getMaximumResponse", fault = {
        @FaultAction(className = Exception_Exception.class, value = "http://server/Tutorial5WebService/getMaximum/Fault/Exception")
    })
    public TemperatureSample getMaximum()
        throws Exception_Exception
    ;

    /**
     * 
     * @return
     *     returns java.lang.Boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "isConnected", targetNamespace = "http://server/", className = "server.IsConnected")
    @ResponseWrapper(localName = "isConnectedResponse", targetNamespace = "http://server/", className = "server.IsConnectedResponse")
    @Action(input = "http://server/Tutorial5WebService/isConnectedRequest", output = "http://server/Tutorial5WebService/isConnectedResponse")
    public Boolean isConnected();

    /**
     * 
     * @param name
     * @return
     *     returns java.lang.String
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "hello", targetNamespace = "http://server/", className = "server.Hello")
    @ResponseWrapper(localName = "helloResponse", targetNamespace = "http://server/", className = "server.HelloResponse")
    @Action(input = "http://server/Tutorial5WebService/helloRequest", output = "http://server/Tutorial5WebService/helloResponse")
    public String hello(
        @WebParam(name = "name", targetNamespace = "")
        String name);

    /**
     * 
     * @return
     *     returns java.lang.Integer
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getNumberOfSamples", targetNamespace = "http://server/", className = "server.GetNumberOfSamples")
    @ResponseWrapper(localName = "getNumberOfSamplesResponse", targetNamespace = "http://server/", className = "server.GetNumberOfSamplesResponse")
    @Action(input = "http://server/Tutorial5WebService/getNumberOfSamplesRequest", output = "http://server/Tutorial5WebService/getNumberOfSamplesResponse")
    public Integer getNumberOfSamples();

    /**
     * 
     * @param sample
     * @return
     *     returns java.lang.Boolean
     * @throws Exception_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "addSample", targetNamespace = "http://server/", className = "server.AddSample")
    @ResponseWrapper(localName = "addSampleResponse", targetNamespace = "http://server/", className = "server.AddSampleResponse")
    @Action(input = "http://server/Tutorial5WebService/addSampleRequest", output = "http://server/Tutorial5WebService/addSampleResponse", fault = {
        @FaultAction(className = Exception_Exception.class, value = "http://server/Tutorial5WebService/addSample/Fault/Exception")
    })
    public Boolean addSample(
        @WebParam(name = "sample", targetNamespace = "")
        TemperatureSample sample)
        throws Exception_Exception
    ;

}
